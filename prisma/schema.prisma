// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  DIRECTOR
}

model User {
  id             Int           @id @default(autoincrement())
  externalId     String        @unique
  email          String        @unique
  name           String
  lastname       String?
  role           Role          @default(STUDENT)
  Group          Group[]
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int?
  Score          Score[]
  File           File[]
  createdAt      DateTime?     @default(now())
  updateAt       DateTime?     @updatedAt
}

model Group {
  id             Int          @id @default(autoincrement())
  name           String
  Users          User[]
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  createdAt      DateTime?    @default(now())
  updateAt       DateTime?    @updatedAt
  Invitations    Invitation[]
}

enum Privacity {
  PUBLIC
  PRIVATE
}

enum Types {
  PRACTICE
  DOCUMENT
  EVALUATION
}

model Note {
  id         Int       @id @default(autoincrement())
  Subject    Subject?  @relation(fields: [subjectId], references: [id])
  subjectId  Int?
  Topic      Topic?    @relation(fields: [topicId], references: [id])
  topicId    Int?
  Subtopic   Subtopic? @relation(fields: [subtopicId], references: [id])
  subtopicId Int?
  File       File?
  fileId     Int?
  type       Types     @default(DOCUMENT)
  Scores     Score[]
  createdAt  DateTime? @default(now())
  updateAt   DateTime? @updatedAt
}

model File {
  id         Int       @id @default(autoincrement())
  externalId String    @unique
  privacity  Privacity @default(PRIVATE)
  name       String    @default("Nuevo documento")
  content    String
  Author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  Note       Note?     @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId     Int?      @unique
  createdAt  DateTime? @default(now())
  updateAt   DateTime? @updatedAt
}

model Score {
  id           Int       @id @default(autoincrement())
  score        Int
  userId       Int
  alternatives String
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Note         Note?     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId       Int?
  createdAt    DateTime? @default(now())
  updateAt     DateTime? @updatedAt
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  color     String
  Topics    Topic[]
  Subtopic  Subtopic[]
  Notes     Note[]
  createdAt DateTime?  @default(now())
  updateAt  DateTime?  @updatedAt
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  Subject   Subject?   @relation(fields: [subjectId], references: [id])
  subjectId Int?
  Subtopics Subtopic[]
  Notes     Note[]
  createdAt DateTime?  @default(now())
  updateAt  DateTime?  @updatedAt
}

model Subtopic {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  Subject   Subject?  @relation(fields: [subjectId], references: [id])
  subjectId Int?
  Topic     Topic     @relation(fields: [topicId], references: [id])
  topicId   Int
  Notes     Note[]
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
}

model Organization {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  Users       User[]
  Groups      Group[]
  createdAt   DateTime?    @default(now())
  updateAt    DateTime?    @updatedAt
  Invitations Invitation[]
}

enum Status {
  PENDING
  REVOKED
  ACCEPTED
}

model Invitation {
  id             String       @id
  email          String
  role           Role         @default(STUDENT)
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  status         Status       @default(PENDING)
  Groups         Group[]
}
