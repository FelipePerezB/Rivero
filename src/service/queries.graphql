# Run "npm run codegen" for autogenerate the schema

query GetSubjects {
  subjects {
    color
    name
    id
    Topics {
      name
    }
  }
}

query GetUser($where: UserWhereUniqueInput!) {
  user(where: $where) {
    name
    lastname
    role
    organizationId
    email
    externalId
    id
  }
}

query GetSubjectsPaths {
  subjects {
    id
  }
}

query GetSubject($subjectId: Int!, $topicId: Int!) {
  subject(id: $subjectId) {
    id
    name
    color
    Notes {
      File {
        externalId
      }
      type
    }
    Topics {
      name
      id
    }
  }
  topicAndSubtopic(id: $topicId) {
    name
    id
    Subtopics {
      _count {
        Notes
      }
      id
      name
      Notes {
        id
        type
        File {
          title
          externalId
          id
        }
      }
    }
  }
}

query GetNotes($where: NoteWhereInput) {
  notes(where: $where) {
    id
    File {
      id
      title
    }
  }
}

query GetUserByEmail($email: String!) {
  userByEmail(email: $email) {
    email
    id
    lastname
    name
    role
  }
}

query GetUsers($where: UserWhereInput) {
  users(where: $where) {
    lastname
    name
    role
    email
  }
}

query GetOrganization {
  organizations {
    id
    name
  }
}

query GetGroups($where: GroupWhereInput) {
  groups(where: $where) {
    id
    name
    Users {
      name
      lastname
      externalId
      role
      externalId
      email
    }
  }
}

mutation CreateGroup($createGroupInput: GroupCreateInput!) {
  createGroup(createGroupInput: $createGroupInput) {
    name
  }
}

mutation CreateTopic($createTopicInput: TopicCreateInput!) {
  createTopic(createTopicInput: $createTopicInput) {
    name
    id
  }
}

mutation CreateSubtopic($createSubtopicInput: SubtopicCreateInput!) {
  createSubtopic(createSubtopicInput: $createSubtopicInput) {
    id
    name
  }
}

mutation CreateNote($createNoteInput: NoteCreateInput!) {
  createNote(createNoteInput: $createNoteInput) {
    id
    File {
      externalId
      title
    }
  }
}

# query LoginUser($user: LoginUserInput!) {
#   login(user: $user) {
#     username
#     email
#     id
#     groupId
#     role
#   }
# }

# query GetSubjectsIds($where: SubjectWhereInput!) {
#   subjects(where: $where) {
#     id
#   }
# }

# mutation UpdateDoc($updateDocId: Float!, $updateDocInput: DocUpdateInput!) {
#   updateDoc(id: $updateDocId, updateDocInput: $updateDocInput) {
#     id
#   }
# }

mutation UpdateTopic(
  $updateTopicId: Float!
  $updateTopicInput: TopicUpdateInput!
) {
  updateTopic(id: $updateTopicId, updateTopicInput: $updateTopicInput) {
    name
    id
  }
}

mutation UpdateSubtopic(
  $updateSubtopicId: Float!
  $updateSubtopicInput: SubtopicUpdateInput!
) {
  updateSubtopic(
    id: $updateSubtopicId
    updateSubtopicInput: $updateSubtopicInput
  ) {
    id
  }
}

mutation UpdateGroup(
  $updateGroupId: Float!
  $updateGroupInput: GroupUpdateInput!
) {
  updateGroup(id: $updateGroupId, updateGroupInput: $updateGroupInput) {
    id
    name
  }
}

mutation UpdateSubject(
  $updateSubjectId: Float!
  $updateSubjectInput: SubjectUpdateInput!
) {
  updateSubject(id: $updateSubjectId, updateSubjectInput: $updateSubjectInput) {
    name
    id
  }
}

mutation UpdateFile($updateFileId: Float!, $updateFileInput: FileUpdateInput!) {
  updateFile(id: $updateFileId, updateFileInput: $updateFileInput) {
    title
    id
  }
}

mutation CreateSubject($createSubjectInput: SubjectCreateInput!) {
  createSubject(createSubjectInput: $createSubjectInput) {
    id
    name
  }
}

mutation createUser($createUserInput: UserCreateInput!) {
  createUser(createUserInput: $createUserInput) {
    id
    email
  }
}

mutation RemoveUser($where: UserWhereUniqueInput!) {
  removeUser(where: $where) {
    id
    name
    lastname
  }
}

mutation RemoveSubject($removeSubjectId: Int!) {
  removeSubject(id: $removeSubjectId) {
    id
    name
  }
}

mutation RemoveGroup($removeGroupId: Int!) {
  removeGroup(id: $removeGroupId) {
    id
    name
  }
}

mutation RemoveNote($removeNoteId: Int!) {
  removeNote(id: $removeNoteId) {
    id
  }
}

mutation UpdateUser(
  $where: UserWhereUniqueInput!
  $updateUserInput: UserUpdateInput!
) {
  updateUser(where: $where, updateUserInput: $updateUserInput) {
    id
  }
}

mutation UpdateNote($updateNoteId: Float!, $updateNoteInput: NoteUpdateInput!) {
  updateNote(id: $updateNoteId, updateNoteInput: $updateNoteInput) {
    id
  }
}

mutation RemoveTopic($removeTopicId: Int!) {
  removeTopic(id: $removeTopicId) {
    id
    name
  }
}

mutation removeSubtopic($removeSubtopicId: Int!) {
  removeSubtopic(id: $removeSubtopicId) {
    name
    id
  }
}

mutation UpsertFile(
  $where: FileWhereUniqueInput!
  $create: FileCreateInput!
  $update: FileUpdateInput!
) {
  upsertFile(where: $where, create: $create, update: $update) {
    title
    externalId
  }
}

query GetFile($where: FileWhereUniqueInput!) {
  file(where: $where) {
    externalId
    id
    title
    content
    privacity
  }
}

query GetFiles($where: FileWhereInput, $skip: Float, $take: Float) {
  files(where: $where, skip: $skip, take: $take) {
    content
    title
    externalId
  }
}

mutation RemoveFile($where: FileWhereUniqueInput!) {
  removeFile(where: $where) {
    externalId
    id
    title
  }
}
