# Run "npm run codegen" for autogenerate the schema

query GetSubjects {
  subjects {
    color
    name
    id
    _count {
      Docs
    }
    Topics {
      name
    }
  }
}

query GetSubjectsPaths {
  subjects {
    id
  }
}

query GetSubject($subjectId: Int!) {
  subject(id: $subjectId) {
    id
    name
    color
    Topics {
      id
      name
      _count {
        Docs
      }
      Subtopics {
        id
        name
        Docs {
          id
          externalId
          title
        }
      }
    }
  }
}

# query GetAllDataSubjects {
#   subjects {
#     id
#     name
#     color
#     Topics {
#       _count {
#         Docs
#       }
#       id
#       name
#       Subtopics {
#         name
#         Docs {
#           id
#           title
#         }
#       }
#     }
#   }
# }

query GetUserByEmail($email: String!) {
  userByEmail(email: $email) {
    email
    gradeId
    id
    username
    role
  }
}

query GetUsers($where: UserWhereInput) {
  users(where: $where) {
    username
    gradeId
    role
    email
  }
}

query GetSchools {
  schools {
    id
    name
  }
}

query GetGrades($where: GradeWhereInput) {
  grades(where: $where) {
    id
    name
  }
}

mutation CreateGrade($createGradeInput: GradeCreateInput!) {
  createGrade(createGradeInput: $createGradeInput) {
    name
  }
}

mutation CreateTopic($createTopicInput: TopicCreateInput!) {
  createTopic(createTopicInput: $createTopicInput) {
    name
    id
  }
}

mutation CreateSubtopic($createSubtopicInput: SubtopicCreateInput!) {
  createSubtopic(createSubtopicInput: $createSubtopicInput) {
    id
    name
  }
}

mutation CreateDoc($createDocInput: DocCreateInput!) {
  createDoc(createDocInput: $createDocInput) {
    id
  }
}

# query LoginUser($user: LoginUserInput!) {
#   login(user: $user) {
#     username
#     email
#     id
#     gradeId
#     role
#   }
# }

# query GetSubjectsIds($where: SubjectWhereInput!) {
#   subjects(where: $where) {
#     id
#   }
# }

mutation UpdateDoc($updateDocId: Float!, $updateDocInput: DocUpdateInput!) {
  updateDoc(id: $updateDocId, updateDocInput: $updateDocInput) {
    id
  }
}
mutation UpdateTopic(
  $updateTopicId: Float!
  $updateTopicInput: TopicUpdateInput!
) {
  updateTopic(id: $updateTopicId, updateTopicInput: $updateTopicInput) {
    name
    id
  }
}

mutation UpdateSubtopic(
  $updateSubtopicId: Float!
  $updateSubtopicInput: SubtopicUpdateInput!
) {
  updateSubtopic(
    id: $updateSubtopicId
    updateSubtopicInput: $updateSubtopicInput
  ) {
    id
  }
}

mutation UpdateGrade(
  $updateGradeId: Float!
  $updateGradeInput: GradeUpdateInput!
) {
  updateGrade(id: $updateGradeId, updateGradeInput: $updateGradeInput) {
    id
    name
  }
}

mutation createUser($createUserInput: UserCreateInput!) {
  createUser(createUserInput: $createUserInput) {
    id
    email
  }
}

mutation RemoveUser($where: UserWhereUniqueInput!) {
  removeUser(where: $where) {
    id
  }
}

mutation UpdateUser(
  $where: UserWhereUniqueInput!
  $updateUserInput: UserUpdateInput!
) {
  updateUser(where: $where, updateUserInput: $updateUserInput) {
    id
  }
}

query GetDoc($where: DocWhereUniqueInput!) {
  doc(where: $where) {
    content
    title
    privacity
    externalId
    id
    type
    Subject {
      name
    }
    Topic {
      name
    }
    Subtopic {
      name
    }
  }
}

mutation RemoveDoc($removeDocId: Int!) {
  removeDoc(id: $removeDocId) {
    title
    id
  }
}

mutation RemoveTopic($removeTopicId: Int!) {
  removeTopic(id: $removeTopicId) {
    id
    name
  }
}

mutation removeSubtopic($removeSubtopicId: Int!) {
  removeSubtopic(id: $removeSubtopicId) {
    name
    id
  }
}
