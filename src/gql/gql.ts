/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetSubjects {\n  subjects {\n    color\n    name\n    id\n    _count {\n      Docs\n    }\n    Topics {\n      name\n    }\n  }\n}\n\nquery GetUser($where: UserWhereUniqueInput!) {\n  user(where: $where) {\n    username\n    role\n    schoolId\n    email\n    externalId\n    id\n  }\n}\n\nquery GetSubjectsPaths {\n  subjects {\n    id\n  }\n}\n\nquery GetSubject($subjectId: Int!) {\n  subject(id: $subjectId) {\n    id\n    name\n    color\n    Topics {\n      id\n      name\n      _count {\n        Docs\n      }\n      Subtopics {\n        id\n        name\n        Docs {\n          id\n          externalId\n          title\n        }\n      }\n    }\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    email\n    gradeId\n    id\n    username\n    role\n  }\n}\n\nquery GetUsers($where: UserWhereInput) {\n  users(where: $where) {\n    username\n    gradeId\n    role\n    email\n  }\n}\n\nquery GetSchools {\n  schools {\n    id\n    name\n  }\n}\n\nquery GetGrades($where: GradeWhereInput) {\n  grades(where: $where) {\n    id\n    name\n  }\n}\n\nmutation CreateGrade($createGradeInput: GradeCreateInput!) {\n  createGrade(createGradeInput: $createGradeInput) {\n    name\n  }\n}\n\nmutation CreateTopic($createTopicInput: TopicCreateInput!) {\n  createTopic(createTopicInput: $createTopicInput) {\n    name\n    id\n  }\n}\n\nmutation CreateSubtopic($createSubtopicInput: SubtopicCreateInput!) {\n  createSubtopic(createSubtopicInput: $createSubtopicInput) {\n    id\n    name\n  }\n}\n\nmutation CreateDoc($createDocInput: DocCreateInput!) {\n  createDoc(createDocInput: $createDocInput) {\n    id\n  }\n}\n\nmutation UpdateDoc($updateDocId: Float!, $updateDocInput: DocUpdateInput!) {\n  updateDoc(id: $updateDocId, updateDocInput: $updateDocInput) {\n    id\n  }\n}\n\nmutation UpdateTopic($updateTopicId: Float!, $updateTopicInput: TopicUpdateInput!) {\n  updateTopic(id: $updateTopicId, updateTopicInput: $updateTopicInput) {\n    name\n    id\n  }\n}\n\nmutation UpdateSubtopic($updateSubtopicId: Float!, $updateSubtopicInput: SubtopicUpdateInput!) {\n  updateSubtopic(id: $updateSubtopicId, updateSubtopicInput: $updateSubtopicInput) {\n    id\n  }\n}\n\nmutation UpdateGrade($updateGradeId: Float!, $updateGradeInput: GradeUpdateInput!) {\n  updateGrade(id: $updateGradeId, updateGradeInput: $updateGradeInput) {\n    id\n    name\n  }\n}\n\nmutation UpdateSubject($updateSubjectId: Float!, $updateSubjectInput: SubjectUpdateInput!) {\n  updateSubject(id: $updateSubjectId, updateSubjectInput: $updateSubjectInput) {\n    name\n    id\n  }\n}\n\nmutation CreateSubject($createSubjectInput: SubjectCreateInput!) {\n  createSubject(createSubjectInput: $createSubjectInput) {\n    id\n    name\n  }\n}\n\nmutation createUser($createUserInput: UserCreateInput!) {\n  createUser(createUserInput: $createUserInput) {\n    id\n    email\n  }\n}\n\nmutation RemoveUser($where: UserWhereUniqueInput!) {\n  removeUser(where: $where) {\n    id\n    username\n  }\n}\n\nmutation RemoveSubject($removeSubjectId: Int!) {\n  removeSubject(id: $removeSubjectId) {\n    id\n    name\n  }\n}\n\nmutation RemoveGrade($removeGradeId: Int!) {\n  removeGrade(id: $removeGradeId) {\n    id\n    name\n  }\n}\n\nmutation UpdateUser($where: UserWhereUniqueInput!, $updateUserInput: UserUpdateInput!) {\n  updateUser(where: $where, updateUserInput: $updateUserInput) {\n    id\n  }\n}\n\nquery GetDoc($where: DocWhereUniqueInput!) {\n  doc(where: $where) {\n    content\n    title\n    privacity\n    externalId\n    id\n    type\n    Subject {\n      name\n    }\n    Topic {\n      name\n    }\n    Subtopic {\n      name\n    }\n  }\n}\n\nmutation RemoveDoc($removeDocId: Int!) {\n  removeDoc(id: $removeDocId) {\n    title\n    id\n  }\n}\n\nmutation RemoveTopic($removeTopicId: Int!) {\n  removeTopic(id: $removeTopicId) {\n    id\n    name\n  }\n}\n\nmutation removeSubtopic($removeSubtopicId: Int!) {\n  removeSubtopic(id: $removeSubtopicId) {\n    name\n    id\n  }\n}": types.GetSubjectsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSubjects {\n  subjects {\n    color\n    name\n    id\n    _count {\n      Docs\n    }\n    Topics {\n      name\n    }\n  }\n}\n\nquery GetUser($where: UserWhereUniqueInput!) {\n  user(where: $where) {\n    username\n    role\n    schoolId\n    email\n    externalId\n    id\n  }\n}\n\nquery GetSubjectsPaths {\n  subjects {\n    id\n  }\n}\n\nquery GetSubject($subjectId: Int!) {\n  subject(id: $subjectId) {\n    id\n    name\n    color\n    Topics {\n      id\n      name\n      _count {\n        Docs\n      }\n      Subtopics {\n        id\n        name\n        Docs {\n          id\n          externalId\n          title\n        }\n      }\n    }\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    email\n    gradeId\n    id\n    username\n    role\n  }\n}\n\nquery GetUsers($where: UserWhereInput) {\n  users(where: $where) {\n    username\n    gradeId\n    role\n    email\n  }\n}\n\nquery GetSchools {\n  schools {\n    id\n    name\n  }\n}\n\nquery GetGrades($where: GradeWhereInput) {\n  grades(where: $where) {\n    id\n    name\n  }\n}\n\nmutation CreateGrade($createGradeInput: GradeCreateInput!) {\n  createGrade(createGradeInput: $createGradeInput) {\n    name\n  }\n}\n\nmutation CreateTopic($createTopicInput: TopicCreateInput!) {\n  createTopic(createTopicInput: $createTopicInput) {\n    name\n    id\n  }\n}\n\nmutation CreateSubtopic($createSubtopicInput: SubtopicCreateInput!) {\n  createSubtopic(createSubtopicInput: $createSubtopicInput) {\n    id\n    name\n  }\n}\n\nmutation CreateDoc($createDocInput: DocCreateInput!) {\n  createDoc(createDocInput: $createDocInput) {\n    id\n  }\n}\n\nmutation UpdateDoc($updateDocId: Float!, $updateDocInput: DocUpdateInput!) {\n  updateDoc(id: $updateDocId, updateDocInput: $updateDocInput) {\n    id\n  }\n}\n\nmutation UpdateTopic($updateTopicId: Float!, $updateTopicInput: TopicUpdateInput!) {\n  updateTopic(id: $updateTopicId, updateTopicInput: $updateTopicInput) {\n    name\n    id\n  }\n}\n\nmutation UpdateSubtopic($updateSubtopicId: Float!, $updateSubtopicInput: SubtopicUpdateInput!) {\n  updateSubtopic(id: $updateSubtopicId, updateSubtopicInput: $updateSubtopicInput) {\n    id\n  }\n}\n\nmutation UpdateGrade($updateGradeId: Float!, $updateGradeInput: GradeUpdateInput!) {\n  updateGrade(id: $updateGradeId, updateGradeInput: $updateGradeInput) {\n    id\n    name\n  }\n}\n\nmutation UpdateSubject($updateSubjectId: Float!, $updateSubjectInput: SubjectUpdateInput!) {\n  updateSubject(id: $updateSubjectId, updateSubjectInput: $updateSubjectInput) {\n    name\n    id\n  }\n}\n\nmutation CreateSubject($createSubjectInput: SubjectCreateInput!) {\n  createSubject(createSubjectInput: $createSubjectInput) {\n    id\n    name\n  }\n}\n\nmutation createUser($createUserInput: UserCreateInput!) {\n  createUser(createUserInput: $createUserInput) {\n    id\n    email\n  }\n}\n\nmutation RemoveUser($where: UserWhereUniqueInput!) {\n  removeUser(where: $where) {\n    id\n    username\n  }\n}\n\nmutation RemoveSubject($removeSubjectId: Int!) {\n  removeSubject(id: $removeSubjectId) {\n    id\n    name\n  }\n}\n\nmutation RemoveGrade($removeGradeId: Int!) {\n  removeGrade(id: $removeGradeId) {\n    id\n    name\n  }\n}\n\nmutation UpdateUser($where: UserWhereUniqueInput!, $updateUserInput: UserUpdateInput!) {\n  updateUser(where: $where, updateUserInput: $updateUserInput) {\n    id\n  }\n}\n\nquery GetDoc($where: DocWhereUniqueInput!) {\n  doc(where: $where) {\n    content\n    title\n    privacity\n    externalId\n    id\n    type\n    Subject {\n      name\n    }\n    Topic {\n      name\n    }\n    Subtopic {\n      name\n    }\n  }\n}\n\nmutation RemoveDoc($removeDocId: Int!) {\n  removeDoc(id: $removeDocId) {\n    title\n    id\n  }\n}\n\nmutation RemoveTopic($removeTopicId: Int!) {\n  removeTopic(id: $removeTopicId) {\n    id\n    name\n  }\n}\n\nmutation removeSubtopic($removeSubtopicId: Int!) {\n  removeSubtopic(id: $removeSubtopicId) {\n    name\n    id\n  }\n}"): (typeof documents)["query GetSubjects {\n  subjects {\n    color\n    name\n    id\n    _count {\n      Docs\n    }\n    Topics {\n      name\n    }\n  }\n}\n\nquery GetUser($where: UserWhereUniqueInput!) {\n  user(where: $where) {\n    username\n    role\n    schoolId\n    email\n    externalId\n    id\n  }\n}\n\nquery GetSubjectsPaths {\n  subjects {\n    id\n  }\n}\n\nquery GetSubject($subjectId: Int!) {\n  subject(id: $subjectId) {\n    id\n    name\n    color\n    Topics {\n      id\n      name\n      _count {\n        Docs\n      }\n      Subtopics {\n        id\n        name\n        Docs {\n          id\n          externalId\n          title\n        }\n      }\n    }\n  }\n}\n\nquery GetUserByEmail($email: String!) {\n  userByEmail(email: $email) {\n    email\n    gradeId\n    id\n    username\n    role\n  }\n}\n\nquery GetUsers($where: UserWhereInput) {\n  users(where: $where) {\n    username\n    gradeId\n    role\n    email\n  }\n}\n\nquery GetSchools {\n  schools {\n    id\n    name\n  }\n}\n\nquery GetGrades($where: GradeWhereInput) {\n  grades(where: $where) {\n    id\n    name\n  }\n}\n\nmutation CreateGrade($createGradeInput: GradeCreateInput!) {\n  createGrade(createGradeInput: $createGradeInput) {\n    name\n  }\n}\n\nmutation CreateTopic($createTopicInput: TopicCreateInput!) {\n  createTopic(createTopicInput: $createTopicInput) {\n    name\n    id\n  }\n}\n\nmutation CreateSubtopic($createSubtopicInput: SubtopicCreateInput!) {\n  createSubtopic(createSubtopicInput: $createSubtopicInput) {\n    id\n    name\n  }\n}\n\nmutation CreateDoc($createDocInput: DocCreateInput!) {\n  createDoc(createDocInput: $createDocInput) {\n    id\n  }\n}\n\nmutation UpdateDoc($updateDocId: Float!, $updateDocInput: DocUpdateInput!) {\n  updateDoc(id: $updateDocId, updateDocInput: $updateDocInput) {\n    id\n  }\n}\n\nmutation UpdateTopic($updateTopicId: Float!, $updateTopicInput: TopicUpdateInput!) {\n  updateTopic(id: $updateTopicId, updateTopicInput: $updateTopicInput) {\n    name\n    id\n  }\n}\n\nmutation UpdateSubtopic($updateSubtopicId: Float!, $updateSubtopicInput: SubtopicUpdateInput!) {\n  updateSubtopic(id: $updateSubtopicId, updateSubtopicInput: $updateSubtopicInput) {\n    id\n  }\n}\n\nmutation UpdateGrade($updateGradeId: Float!, $updateGradeInput: GradeUpdateInput!) {\n  updateGrade(id: $updateGradeId, updateGradeInput: $updateGradeInput) {\n    id\n    name\n  }\n}\n\nmutation UpdateSubject($updateSubjectId: Float!, $updateSubjectInput: SubjectUpdateInput!) {\n  updateSubject(id: $updateSubjectId, updateSubjectInput: $updateSubjectInput) {\n    name\n    id\n  }\n}\n\nmutation CreateSubject($createSubjectInput: SubjectCreateInput!) {\n  createSubject(createSubjectInput: $createSubjectInput) {\n    id\n    name\n  }\n}\n\nmutation createUser($createUserInput: UserCreateInput!) {\n  createUser(createUserInput: $createUserInput) {\n    id\n    email\n  }\n}\n\nmutation RemoveUser($where: UserWhereUniqueInput!) {\n  removeUser(where: $where) {\n    id\n    username\n  }\n}\n\nmutation RemoveSubject($removeSubjectId: Int!) {\n  removeSubject(id: $removeSubjectId) {\n    id\n    name\n  }\n}\n\nmutation RemoveGrade($removeGradeId: Int!) {\n  removeGrade(id: $removeGradeId) {\n    id\n    name\n  }\n}\n\nmutation UpdateUser($where: UserWhereUniqueInput!, $updateUserInput: UserUpdateInput!) {\n  updateUser(where: $where, updateUserInput: $updateUserInput) {\n    id\n  }\n}\n\nquery GetDoc($where: DocWhereUniqueInput!) {\n  doc(where: $where) {\n    content\n    title\n    privacity\n    externalId\n    id\n    type\n    Subject {\n      name\n    }\n    Topic {\n      name\n    }\n    Subtopic {\n      name\n    }\n  }\n}\n\nmutation RemoveDoc($removeDocId: Int!) {\n  removeDoc(id: $removeDocId) {\n    title\n    id\n  }\n}\n\nmutation RemoveTopic($removeTopicId: Int!) {\n  removeTopic(id: $removeTopicId) {\n    id\n    name\n  }\n}\n\nmutation removeSubtopic($removeSubtopicId: Int!) {\n  removeSubtopic(id: $removeSubtopicId) {\n    name\n    id\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;